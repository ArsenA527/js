const maskErrors1 = [{
    0: "ВСК: СНГ-Исправна (З1)",
    1: "ВСК: СНГ-ОТКАЗ (З1)",
  },
  {
    0: "ВСК: СНГ-Исправна (КРТВ1)",
    1: "ВСК: СНГ-ОТКАЗ (КРТВ1)",
  },
  {
    0: "ВСК: СНГ-Исправна (К1)",
    1: "ВСК: СНГ-ОТКАЗ (К1)",
  },
  {
    0: "ВСК: СНГ-Исправна (К2)",
    1: "ВСК: СНГ-ОТКАЗ (К2)",
  },
  {
    0: "ВСК: СНГ-Исправна (ЗРУ1)",
    1: "ВСК: СНГ-ОТКАЗ (ЗРУ1)",
  },
  {
    0: "КЭ1 Исправен (ОБ)",
    1: "КЭ1 ОТКАЗ (ОБ)"
  },
  {
    0: "КП1 Исправен (ОБ)",
    1: "КП1 ОТКАЗ (ОБ)"
  },
  {
    0: "КЭ1 Исправен (КЗ)",
    1: "КЭ1 ОТКАЗ (КЗ)"
  },
  {
    0: "КП1 Исправен (КЗ)",
    1: "КП1 ОТКАЗ (КЗ)"
  },
  {
    0: "КЭ1 Исправен (КЗ)",
    1: "КЭ1 ОТКАЗ (КЗ)"
  },
  {
    0: "КП1 Исправен",
    1: "КП1 ОТКАЗ"
  },
  "",
  "",
  "",
  "",
  "",
  "",
  {
    0: "ДТ1-Исправен",
    1: "ДТ1-ОТКАЗ",
  },
  {
    0: "ДТ2-Исправен",
    1: "ДТ2-ОТКАЗ",
  },
  "",
  {
    0: "ВСК: ДТ1 и ДТ2-Исправны",
    1: "ВСК: ДТ1 и ДТ2-ОТКАЗ",
  },
  {
    0: "ВСК: ДДА1-Исправны",
    1: "ВСК: ДДА1-ОТКАЗ",
  },
  {
    0: "ВСК: ДПД1-Исправна",
    1: "ВСК: ДПД1-ОТКАЗ",
  },
  {
    0: "ВСК: ДДА2-Исправна",
    1: "ВСК: ДДА2-ОТКАЗ",
  },
  {
    0: "ВСК: ДПД2-Исправна",
    1: "ВСК: ДПД2-ОТКАЗ",
  },
  {
    0: "ВСК: ДДи1-Исправна",
    1: "ВСК: ДДи1-ОТКАЗ",
  },
  "",
  {
    0: "ВСК: К1-Исправен (О)",
    1: "ВСК: К1-ОТКАЗ (О)",
  },
  "",
  {
    0: "ВСК: К1-Исправен (З)",
    1: "ВСК: К1-ОТКАЗ (З)",
  },
  "",
];

/*

"З1-ОТКАЗ",

*/


const maskErrors2 = [{
    0: "ВСК: К2-Исправен (О)",
    1: "ВСК: К2-ОТКАЗ (О)",
  },
  "",
  {
    0: "ВСК: К2-Исправен (З)",
    1: "ВСК: К2-ОТКАЗ (З)",
  },
  "",
  {
    0: "ВСК: К3-Исправен (О)",
    1: "ВСК: К3-ОТКАЗ (О)",
  },
  "",
  {
    0: "ВСК: К3-Исправен (З)",
    1: "ВСК: К3-ОТКАЗ (З)",
  },
  {
    0: "ВСК: ГПДК-Исправен (Г)",
    1: "ВСК: ГПДК-Отказ (Г)",
  },
  {
    0: "ВСК: ГПДК-Исправен (К)",
    1: "ВСК: ГПДК-Отказ (К)",
  },
  "",
  {
    0: "ВСК: К4-Исправен (О)",
    1: "ВСК: К4-ОТКАЗ (О)",
  },
  "",
  {
    0: "ВСК: К4-Исправен (З)",
    1: "ВСК: К4-ОТКАЗ (З)",
  },
  "",
  {
    0: "ВСК: К5-Исправен (О)",
    1: "ВСК: К5-ОТКАЗ (О)",
  },
  "",
  {
    0: "ВСК: К5-Исправен (З)",
    1: "ВСК: К5-ОТКАЗ (З)",
  },

  {
    0: "",
    1: "СНГ-ОТКАЗ",
  },
  {
    0: "ДПД1-Исправен",
    1: "ДПД1-ОТКАЗ",
  },
  {
    0: "",
    1: "СНГ: Ф1 загрязне",
  },
  {
    0: "",
    1: "СНГ: Темп НИЗКАЯ",
  },
  {
    0: "",
    1: "СНГ: Темп ПРЕВЫШЕНА",
  },

  {
    0: "ММ1-Исправен",
    1: "ММ1-ОТКАЗ",
  },
  {
    0: "ММ2-Исправен",
    1: "ММ2-ОТКАЗ",
  },
  {
    0: "",
    1: "СНГ: Давл. НИЗКОЕ",
  },
  {
    0: "",
    1: "СНГ: Расход НИЗКИЙ",
  },
  {
    0: "ДДа1-Исправен",
    1: "ДДа1-ОТКАЗ",
  },
  {
    0: "КЭ1,КП1-Исправны",
    1: "КЭ1,КП1-ОТКАЗ",
  },
  {
    0: "З1-Исправен",
    1: "З1-ОТКАЗ",
  },
];

let firstData,
  secondData;

function getMsg(fails_mask1, fails_mask2) {
  let res = {
    allMsg: '',
    errorMsg: '',
  };
  const convertToBinary1 = (fails_mask1 >>> 0).toString(2).split("").join("").padEnd(maskErrors1.length, '0');
  const convertToBinary2 = (fails_mask2 >>> 0).toString(2).split("").join("").padEnd(maskErrors2.length, '0');

  for (let i = 0; i < maskErrors1.length; i++) {
    if (maskErrors1[i] !== "") {
      res.allMsg += maskErrors1[i][`${convertToBinary1[i]}`] + '\n';
      if (convertToBinary1[i] == 1)
        res.errorMsg += maskErrors1[i][`${convertToBinary1[i]}`] + '\n';
    }
  }

  for (let i = 0; i < maskErrors2.length; i++) {
    if (maskErrors2[i] !== "") {
      res.allMsg += maskErrors2[i][`${convertToBinary2[i]}`] + '\n';
      if (convertToBinary2[i] == 1)
        res.errorMsg += maskErrors2[i][`${convertToBinary2[i]}`] + '\n';
    }
  }
  return res;
}


result = getMsg(mask1, mask2).allMsg;
result_error = getMsg(mask1, mask2).errorMsg;